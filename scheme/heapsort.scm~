#lang racket

(define (vector-exchange! vector x y)
  (let ((vx (vector-ref vector x))
        (vy (vector-ref vector y)))
    (begin
      (vector-set! vector x vy)
      (vector-set! vector y vx)
      vector)))
            

(define (max-heapify! heap heap-size i)
  (let ((l (* 2 i))
        (r (+ (* 2 i) 1)))
    (let ((max 
           (if (and (< l heap-size) 
                    (> (vector-ref heap l)
                       (vector-ref heap i)))
               l
               i)))
      (begin
        (when (and (< r heap-size)
                 (> (vector-ref heap r)
                    (vector-ref heap max)))
            (set! max r))
        (when (not (= max i))
          (begin
            (vector-exchange! heap max i)
            (max-heapify! heap heap-size max)))))))

(define (build-max-heap! heap)
  (let ((heap-size (vector-length heap)))
    (let label ((i (quotient heap-size 2)))
      (when (> i 0)
          (begin
            (max-heapify! heap heap-size i)
            (label (- i 1)))))))

(define (heapsort! heap)
  (begin
    (build-max-heap! heap)
    (let ((heap-size (vector-length heap)))
      (let label ((i heap-size))
        (max-heapify! 
         (vector-exchange! heap 1 i)
         (- heap-size 1)
         1)
        (when (> i 1)
            (label (- i 1)))))))
       
      
  
        
    

                      
          
        